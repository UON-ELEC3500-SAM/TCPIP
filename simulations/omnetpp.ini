[General]

network = cwindow
warnings = true
cmdenv-event-banners = true   # for normal (non-express) mode only
**.vector-recording = true


####Parameters that needs to be changed for ELEC3500
*cwindow.numClients = ${numClients=1}   				# Number of clients in the network (single run, comment out if you want to run as batch from command line)
#*cwindow.numClients = ${numClients=1..4 step 1}   	    # Number of clients in the network (command line batch, comment out to do a single GUI run)
sim-time-limit = 200.0s									# Simulation time
**.tcp.advertisedWindow = 65535*10                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.ppp[*].ppp.mtu = 4470B   							#PPP MTU size, default = 4470B	
**.tcp.mss = 1000                                       # Maximum Segment Size (RFC 793) (header option), default = 1452
**.router.ppp[*].queue.frameCapacity = 10				# Router frame capacity
**.client*.app[*].sendBytes = 1000MiB


##mobility
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 2000m
**.constraintAreaMaxY = 2000m
**.constraintAreaMaxZ = 0m

#Clients location settings
cwindow.client[*].mobilityType = "StationaryMobility"
cwindow.client[numClients].mobility.initialX = 150m + 20m*cos(parentIndex()*(6.283185 / ${numClients}))  #uniform(50m,250m)
cwindow.client[numClients].mobility.initialY = 250m + 20m*sin(parentIndex()*(6.283185 / ${numClients}))  #uniform(150m,350m)
cwindow.client[numClients].mobility.initialZ = 0m
*.client[*].mobility.initFromDisplayString = false

#
# Network specific settings
#

# ip settings
**.forwarding = true

# hookType settings
# Arp settings
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s

# NIC settings
**.ppp[*].queue.typename = "DropTailQueue"
**.client[*].ppp[0].queue.frameCapacity = 100
**.server.ppp[*].queue.frameCapacity = 100
#**.ppp[*].queue.frameCapacity = 100    # packets




# thruput measurement settings
**.startTime = 0s     # start time
**.batchSize = 50     # number of packets in a batch
**.maxInterval = 1s   # max length of measurement interval (measurement ends
                      # if either batchsize or maxinterval is reached, whichever
                      # is reached first)

# tcp apps - client
**.client*.numApps = 1
**.client*.app[*].typename = "TcpSessionApp"  # FTP
**.client*.app[*].connectAddress = "server"
**.client*.app[*].connectPort = 10021
**.client*.app[*].tOpen = 0s
**.client*.app[*].tSend = 0s
**.client*.app[*].tClose = 0s
**.client*.app[*].sendScript = ""

**.client[0].app[*].localPort = 10020
**.client[1].app[*].localPort = 10021
**.client[2].app[*].localPort = 10022
**.client[3].app[*].localPort = 10023
**.client[4].app[*].localPort = 10024
**.client[5].app[*].localPort = 10025

**.client[0].app[*].active = true
**.client[1].app[*].active = true
**.client[2].app[*].active = true
**.client[3].app[*].active = true
**.client[4].app[*].active = true
**.client[5].app[*].active = true


# tcp apps - server
**.server.numApps = 1
**.server.app[*].typename = "TcpSinkApp"
**.server.app[*].localPort = 10021

# tcp settings
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
**.tcp.recordStats = true                            # recording of seqNum etc. into output vectors enabled/disabled



